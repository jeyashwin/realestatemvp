# Generated by Django 3.1.2 on 2020-12-28 11:41

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import property.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0002_remove_userlandlord_profilepicture'),
    ]

    operations = [
        migrations.CreateModel(
            name='Amenities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amenityType', models.CharField(help_text='Type of Amenity. eg Pool, GYM etc', max_length=100, verbose_name='Amenity Type')),
            ],
            options={
                'verbose_name_plural': 'Amenities',
            },
        ),
        migrations.CreateModel(
            name='CityList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cityName', models.CharField(help_text='City Name. Eg Stony Brook', max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('urlSlug', models.SlugField(editable=False, max_length=200, unique=True, verbose_name='URL')),
                ('title', models.CharField(help_text='Title for your property', max_length=150)),
                ('zipcode', models.CharField(help_text='Eg 503 - 00503', max_length=5, validators=[django.core.validators.RegexValidator(message='Only numbers allowed.', regex='^\\d{5}$'), django.core.validators.MinLengthValidator(5, '5 digit code')], verbose_name='Zip or Postal Code')),
                ('address', models.CharField(help_text='Address of your property', max_length=250)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('locationType', models.CharField(blank=True, max_length=200, null=True)),
                ('averageDistance', models.FloatField(default=0, help_text='Average distance between the nearby amenities (in miles).')),
                ('placeId', models.CharField(blank=True, max_length=300, null=True)),
                ('sqft', models.FloatField(help_text='Total Square feet of property', validators=[django.core.validators.MinValueValidator(1, 'Square Feet should be atleast 1.')], verbose_name='Square Feet')),
                ('occupants', models.IntegerField(help_text='Number of people can stay', validators=[django.core.validators.MinValueValidator(1, 'Minimum 1'), django.core.validators.MaxValueValidator(20, 'Maximum 20')])),
                ('rooms', models.IntegerField(help_text='Available Rooms', validators=[django.core.validators.MinValueValidator(1, 'Minimum 1'), django.core.validators.MaxValueValidator(20, 'Maximum 20')])),
                ('bathrooms', models.IntegerField(help_text='Number of Bathrooms', validators=[django.core.validators.MinValueValidator(1, 'Minimum 1'), django.core.validators.MaxValueValidator(20, 'Maximum 20')])),
                ('securityDeposit', models.BooleanField(default=False, help_text='Select if security deposit needed', verbose_name='Security Deposit')),
                ('amount', models.IntegerField(blank=True, help_text='Security Deposit Amount in $', null=True, validators=[django.core.validators.MinValueValidator(0, 'Minimum Amount cannot be lower than 0')])),
                ('rentPerPerson', models.IntegerField(help_text='Amount in $', validators=[django.core.validators.MinValueValidator(0, 'Minimum Price cannot be lower than 0')], verbose_name='Rent Per Person')),
                ('description', models.TextField(help_text='Describe about your property', max_length=500)),
                ('garage', models.BooleanField(default=False, help_text='Select if you have Garage')),
                ('parkingSpace', models.IntegerField(default=0, help_text='Available Parking Space. Eg 1 or 2', validators=[django.core.validators.MinValueValidator(0, 'Minimum 0'), django.core.validators.MaxValueValidator(20, 'Maximum 20')], verbose_name='Parking Space')),
                ('fromDate', models.DateField(help_text='From which date property available for rent', verbose_name='From Date')),
                ('toDate', models.DateField(help_text='Till which the property will be available.', verbose_name='To Date')),
                ('isleased', models.BooleanField(default=False)),
                ('leaseStart', models.DateField(blank=True, null=True)),
                ('leaseEnd', models.DateField(blank=True, null=True)),
                ('updatedDate', models.DateTimeField(auto_now=True, verbose_name='Last Updated Date')),
                ('createdDate', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('amenities', models.ManyToManyField(help_text='Select 1 or more Amenities.', to='property.Amenities')),
                ('city', models.ForeignKey(help_text='Select property located city', on_delete=django.db.models.deletion.CASCADE, to='property.citylist')),
                ('dislikes', models.ManyToManyField(blank=True, related_name='propDislikes', to='users.UserStudent')),
                ('landlord', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.userlandlord')),
                ('likes', models.ManyToManyField(blank=True, related_name='propLikes', to='users.UserStudent')),
            ],
            options={
                'verbose_name_plural': 'Properties',
            },
        ),
        migrations.CreateModel(
            name='StateList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stateFullName', models.CharField(help_text='Full name of State. Eg Newyork', max_length=150, verbose_name='State Name')),
                ('stateShortName', models.CharField(help_text='Short name of a state. Eg Newyork - NY', max_length=10, verbose_name='Short Form')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('videoDescription', models.CharField(help_text='Describe about video. Eg Bedroom 1', max_length=50, verbose_name='Video Description')),
                ('videoPath', models.FileField(help_text='Allowed extentions are: mov, mp4, avi, mkv', upload_to=property.utils.unique_file_path_generator, verbose_name='Video')),
                ('propertyKey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.property')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyNearby',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nearByType', models.CharField(max_length=100)),
                ('nearByName', models.CharField(blank=True, max_length=200, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('placeId', models.CharField(blank=True, max_length=300, null=True)),
                ('distanceToProp', models.FloatField(default=0, help_text='Distance to property in miles.')),
                ('propObject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.property')),
            ],
            options={
                'ordering': ['distanceToProp'],
            },
        ),
        migrations.CreateModel(
            name='PropertyJobStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jobid', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=300)),
                ('updatedDate', models.DateTimeField(auto_now=True)),
                ('propObject', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='property.property')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imageDescription', models.CharField(max_length=50, verbose_name='Video Description')),
                ('imagePath', models.ImageField(upload_to=property.utils.unique_file_path_generator, verbose_name='Image')),
                ('propertyKey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.property')),
            ],
        ),
        migrations.CreateModel(
            name='PostQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=250)),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('propKey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.property', verbose_name='Property')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.userstudent')),
            ],
            options={
                'ordering': ['-createdDate'],
            },
        ),
        migrations.CreateModel(
            name='PostAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=250)),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='property.postquestion')),
            ],
        ),
        migrations.AddField(
            model_name='citylist',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.statelist'),
        ),
    ]
